import { Location } from "../context";
import { Token } from "../lexer";
import { MetaElement, MetaTable } from "../meta";
import { Attribute } from "./attribute";
import { DOMNode } from "./domnode";
import { DOMTokenList } from "./domtokenlist";
import { DynamicValue } from "./dynamic-value";
export declare enum NodeClosed {
    Open = 0,
    EndTag = 1,
    VoidOmitted = 2,
    VoidSelfClosed = 3,
    ImplicitClosed = 4
}
export declare function reset(): void;
export declare class HtmlElement extends DOMNode {
    readonly tagName: string;
    readonly attr: {
        [key: string]: Attribute;
    };
    readonly children: HtmlElement[];
    readonly location: Location;
    readonly meta: MetaElement;
    readonly parent: HtmlElement;
    readonly voidElement: boolean;
    readonly unique: number;
    readonly depth: number;
    closed: NodeClosed;
    constructor(tagName: string, parent?: HtmlElement, closed?: NodeClosed, meta?: MetaElement, location?: Location);
    static rootNode(location: Location): HtmlElement;
    static fromTokens(startToken: Token, endToken: Token, parent: HtmlElement, metaTable: MetaTable): HtmlElement;
    is(tagName: string): boolean;
    isRootElement(): boolean;
    setAttribute(key: string, value: string | DynamicValue, location: Location): void;
    hasAttribute(key: string): boolean;
    getAttribute(key: string): Attribute;
    getAttributeValue(key: string): string;
    append(node: HtmlElement): void;
    readonly classList: DOMTokenList;
    readonly id: string;
    readonly siblings: HtmlElement[];
    readonly previousSibling: HtmlElement;
    readonly nextSibling: HtmlElement;
    getElementsByTagName(tagName: string): HtmlElement[];
    querySelector(selector: string): HtmlElement;
    querySelectorAll(selector: string): HtmlElement[];
    private querySelectorImpl;
    visitDepthFirst(callback: (node: HtmlElement) => void): void;
    someChildren(callback: (node: HtmlElement) => boolean): boolean;
    everyChildren(callback: (node: HtmlElement) => boolean): boolean;
    find(callback: (node: HtmlElement) => boolean): HtmlElement;
}
