"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const meta_1 = require("../meta");
const rule_1 = require("../rule");
class ElementPermittedContent extends rule_1.Rule {
    documentation() {
        return {
            description: "Some elements has restrictions on what content is allowed. This can include both direct children or descendant elements.",
            url: rule_1.ruleDocumentationUrl(__filename),
        };
    }
    setup() {
        this.on("dom:ready", (event) => {
            const doc = event.document;
            doc.visitDepthFirst((node) => {
                if (node.parent.isRootElement()) {
                    return;
                }
                if (!node.parent.meta) {
                    return;
                }
                const parent = node.parent;
                const rules = parent.meta.permittedContent;
                this.validatePermittedContent(node, parent, rules);
                this.validatePermittedDescendant(node, parent);
            });
        });
    }
    validatePermittedContent(cur, parent, rules) {
        if (!meta_1.Validator.validatePermitted(cur, rules)) {
            this.report(cur, `Element <${cur.tagName}> is not permitted as content in <${parent.tagName}>`);
            return;
        }
        if (cur.meta && cur.meta.transparent) {
            cur.children.forEach((child) => {
                this.validatePermittedContent(child, parent, rules);
            });
        }
    }
    validatePermittedDescendant(node, parent) {
        while (!parent.isRootElement()) {
            if (parent.meta &&
                node.meta &&
                !meta_1.Validator.validatePermitted(node, parent.meta.permittedDescendants)) {
                this.report(node, `Element <${node.tagName}> is not permitted as descendant of <${parent.tagName}>`);
                return;
            }
            parent = parent.parent;
        }
    }
}
module.exports = ElementPermittedContent;
