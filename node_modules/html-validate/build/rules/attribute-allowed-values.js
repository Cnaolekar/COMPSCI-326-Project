"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const meta_1 = require("../meta");
const rule_1 = require("../rule");
class AttributeAllowedValues extends rule_1.Rule {
    documentation(context) {
        const docs = {
            description: "Attribute has invalid value.",
            url: rule_1.ruleDocumentationUrl(__filename),
        };
        if (context) {
            const allowed = context.allowed.map((val) => `- \`${val}\``);
            docs.description = `Element <${context.element}> does not allow attribute \`${context.attribute}\` to have the value \`${context.value}\`, it must match one of the following:\n\n${allowed.join("\n")}`;
        }
        return docs;
    }
    setup() {
        this.on("dom:ready", (event) => {
            const doc = event.document;
            doc.visitDepthFirst((node) => {
                const meta = node.meta;
                if (!meta || !meta.attributes)
                    return;
                for (const [key, attr] of Object.entries(node.attr)) {
                    if (!meta_1.Validator.validateAttribute(key, attr.value, meta.attributes)) {
                        const context = {
                            element: node.tagName,
                            attribute: attr.key,
                            value: attr.value.toString(),
                            allowed: meta.attributes[key],
                        };
                        this.report(node, `Attribute "${key}" has invalid value "${attr.value}"`, attr.location, context);
                    }
                }
            });
        });
    }
}
module.exports = AttributeAllowedValues;
