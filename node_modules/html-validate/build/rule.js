"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const config_1 = require("./config");
const homepage = require("../package.json").homepage;
class Rule {
    constructor(options) {
        this.options = options;
        this.enabled = true;
    }
    getSeverity() {
        return this.severity;
    }
    setServerity(severity) {
        this.severity = severity;
    }
    setEnabled(enabled) {
        this.enabled = enabled;
    }
    isEnabled() {
        return this.enabled && this.severity >= config_1.Severity.WARN;
    }
    report(node, message, location, context) {
        if (this.isEnabled() && (!node || node.ruleEnabled(this.name))) {
            const where = this.findLocation({ node, location, event: this.event });
            this.reporter.add(node, this, message, this.severity, where, context);
        }
    }
    findLocation(src) {
        if (src.location) {
            return src.location;
        }
        if (src.event && src.event.location) {
            return src.event.location;
        }
        if (src.node && src.node.location) {
            return src.node.location;
        }
        return {};
    }
    on(event, callback) {
        this.parser.on(event, (event, data) => {
            if (this.isEnabled()) {
                this.event = data;
                callback(data);
            }
        });
    }
    init(parser, reporter, severity) {
        this.parser = parser;
        this.reporter = reporter;
        this.severity = severity;
    }
    documentation(context) {
        return null;
    }
}
exports.Rule = Rule;
function ruleDocumentationUrl(filename) {
    const p = path.parse(filename);
    return `${homepage}/rules/${p.name}.html`;
}
exports.ruleDocumentationUrl = ruleDocumentationUrl;
