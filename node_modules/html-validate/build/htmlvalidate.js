"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("./config");
const engine_1 = require("./engine");
const parser_1 = require("./parser");
class HtmlValidate {
    constructor(options) {
        const defaults = config_1.Config.empty();
        this.globalConfig = defaults.merge(options ? config_1.Config.fromObject(options) : config_1.Config.defaultConfig());
        this.configLoader = new config_1.ConfigLoader(config_1.Config);
    }
    validateString(str) {
        const source = {
            column: 1,
            data: str,
            filename: "inline",
            line: 1,
        };
        return this.validateSource(source);
    }
    validateSource(source) {
        const config = this.getConfigFor("inline");
        const engine = new engine_1.Engine(config, parser_1.Parser);
        return engine.lint([source]);
    }
    validateFile(filename) {
        const config = this.getConfigFor(filename);
        const source = config.transform(filename);
        const engine = new engine_1.Engine(config, parser_1.Parser);
        return engine.lint(source);
    }
    dumpTokens(filename) {
        const config = this.getConfigFor(filename);
        const source = config.transform(filename);
        const engine = new engine_1.Engine(config, parser_1.Parser);
        return engine.dumpTokens(source);
    }
    dumpEvents(filename) {
        const config = this.getConfigFor(filename);
        const source = config.transform(filename);
        const engine = new engine_1.Engine(config, parser_1.Parser);
        return engine.dumpEvents(source);
    }
    dumpTree(filename) {
        const config = this.getConfigFor(filename);
        const source = config.transform(filename);
        const engine = new engine_1.Engine(config, parser_1.Parser);
        return engine.dumpTree(source);
    }
    getRuleDocumentation(ruleId, config, context) {
        const engine = new engine_1.Engine(config || this.getConfigFor("inline"), parser_1.Parser);
        return engine.getRuleDocumentation(ruleId, context);
    }
    getParserFor(source) {
        const config = this.getConfigFor(source.filename);
        return new parser_1.Parser(config);
    }
    getConfigFor(filename) {
        const config = this.configLoader.fromTarget(filename);
        const merged = this.globalConfig.merge(config);
        merged.init();
        return merged;
    }
    flushConfigCache(filename) {
        this.configLoader.flush(filename);
    }
}
exports.default = HtmlValidate;
